---
import path from "node:path";

interface Props {
  id?: string;
  src: string;
  class?: string;
  alt?: string;
  position?: string;
  basePath?: string;
  // Performance hints
  priority?: boolean;
  loading?: "eager" | "lazy";
  fetchpriority?: "high" | "low" | "auto";
  decoding?: "async" | "sync" | "auto";
}

import { Image } from "astro:assets";
import { url } from "../../utils/url-utils";

const { id, src, alt, position = "center", basePath = "/" } = Astro.props;
const priority: boolean = Astro.props.priority ?? false;
const loadingAttr: "eager" | "lazy" = Astro.props.loading ?? (priority ? "eager" : "lazy");
const fetchPrio: "high" | "low" | "auto" =
  Astro.props.fetchpriority ?? (priority ? "high" : "auto");
const decodingAttr: "async" | "sync" | "auto" = Astro.props.decoding ?? "async";
const className = Astro.props.class;

const isLocal = !(
  src.startsWith("/") ||
  src.startsWith("http") ||
  src.startsWith("https") ||
  src.startsWith("data:")
);
const isPublic = src.startsWith("/");

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
// biome-ignore lint/suspicious/noImplicitAnyLet: <check later>
let img;
if (isLocal) {
  const files = import.meta.glob<ImageMetadata>("../../**", {
    import: "default",
  });
  let normalizedPath = path.normalize(path.join("../../", basePath, src)).replace(/\\/g, "/");
  const file = files[normalizedPath];
  if (!file) {
    console.error(`\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}`);
  }
  img = await file();
}

const imageClass = "w-full h-full object-cover";
const imageStyle = `object-position: ${position}`;
---
<div id={id} class:list={[className, 'overflow-hidden relative']}>
    <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"></div>
    {isLocal && img && <Image src={img} alt={alt || ""} class={imageClass} style={imageStyle}
                              loading={loadingAttr} fetchpriority={fetchPrio} decoding={decodingAttr} />}
    {!isLocal && <img src={isPublic ? url(src) : src} alt={alt || ""} class={imageClass} style={imageStyle}
                      loading={loadingAttr} fetchpriority={fetchPrio} decoding={decodingAttr} />}
</div>
